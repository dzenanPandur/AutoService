// <auto-generated />
using System;
using AutoService.Data.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AutoService.Data.Migrations
{
    [DbContext(typeof(AutoServiceContext))]
    [Migration("20240705001032_fix-user-seed")]
    partial class fixuserseed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("AutoService.Data.Entities.ServiceData.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsOccupied")
                        .HasColumnType("bit");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClientId = new Guid("813a46d4-a59a-47ed-a88f-3143456e6f13"),
                            Date = new DateTime(2024, 7, 11, 2, 10, 32, 32, DateTimeKind.Local).AddTicks(4853),
                            IsOccupied = true,
                            RequestId = 1
                        },
                        new
                        {
                            Id = 2,
                            ClientId = new Guid("813a46d4-a59a-47ed-a88f-3143456e6f13"),
                            Date = new DateTime(2024, 7, 10, 2, 10, 32, 32, DateTimeKind.Local).AddTicks(4858),
                            IsOccupied = false,
                            RequestId = 2
                        },
                        new
                        {
                            Id = 3,
                            ClientId = new Guid("813a46d4-a59a-47ed-a88f-3143456e6f13"),
                            Date = new DateTime(2024, 7, 12, 2, 10, 32, 32, DateTimeKind.Local).AddTicks(4860),
                            IsOccupied = true,
                            RequestId = 3
                        },
                        new
                        {
                            Id = 4,
                            ClientId = new Guid("813a46d4-a59a-47ed-a88f-3143456e6f13"),
                            Date = new DateTime(2024, 7, 13, 2, 10, 32, 32, DateTimeKind.Local).AddTicks(4862),
                            IsOccupied = false,
                            RequestId = 4
                        },
                        new
                        {
                            Id = 5,
                            ClientId = new Guid("813a46d4-a59a-47ed-a88f-3143456e6f13"),
                            Date = new DateTime(2024, 5, 5, 2, 10, 32, 32, DateTimeKind.Local).AddTicks(4863),
                            IsOccupied = false,
                            RequestId = 5
                        },
                        new
                        {
                            Id = 6,
                            ClientId = new Guid("813a46d4-a59a-47ed-a88f-3143456e6f13"),
                            Date = new DateTime(2024, 4, 5, 2, 10, 32, 32, DateTimeKind.Local).AddTicks(4865),
                            IsOccupied = false,
                            RequestId = 6
                        },
                        new
                        {
                            Id = 7,
                            ClientId = new Guid("813a46d4-a59a-47ed-a88f-3143456e6f13"),
                            Date = new DateTime(2024, 3, 5, 2, 10, 32, 32, DateTimeKind.Local).AddTicks(4867),
                            IsOccupied = false,
                            RequestId = 7
                        },
                        new
                        {
                            Id = 8,
                            ClientId = new Guid("813a46d4-a59a-47ed-a88f-3143456e6f13"),
                            Date = new DateTime(2024, 1, 5, 2, 10, 32, 32, DateTimeKind.Local).AddTicks(4869),
                            IsOccupied = false,
                            RequestId = 8
                        });
                });

            modelBuilder.Entity("AutoService.Data.Entities.ServiceData.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Checks",
                            isActive = true
                        },
                        new
                        {
                            Id = 2,
                            Name = "Changes",
                            isActive = true
                        },
                        new
                        {
                            Id = 3,
                            Name = "Tuning",
                            isActive = true
                        });
                });

            modelBuilder.Entity("AutoService.Data.Entities.ServiceData.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomRequest")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCompleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateRequested")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal?>("TotalCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId")
                        .IsUnique()
                        .HasFilter("[AppointmentId] IS NOT NULL");

                    b.HasIndex("ClientId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Request");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppointmentId = 1,
                            ClientId = new Guid("813a46d4-a59a-47ed-a88f-3143456e6f13"),
                            CustomRequest = "Change tires",
                            DateCompleted = new DateTime(2024, 7, 5, 0, 10, 32, 32, DateTimeKind.Utc).AddTicks(4821),
                            DateRequested = new DateTime(2024, 7, 11, 0, 10, 32, 32, DateTimeKind.Utc).AddTicks(4822),
                            Message = " ",
                            Status = 2,
                            TotalCost = 600m,
                            VehicleId = 1
                        },
                        new
                        {
                            Id = 2,
                            AppointmentId = 2,
                            ClientId = new Guid("813a46d4-a59a-47ed-a88f-3143456e6f13"),
                            CustomRequest = "Change window",
                            DateCompleted = new DateTime(2024, 7, 5, 0, 10, 32, 32, DateTimeKind.Utc).AddTicks(4825),
                            DateRequested = new DateTime(2024, 7, 10, 0, 10, 32, 32, DateTimeKind.Utc).AddTicks(4825),
                            Message = " ",
                            Status = 6,
                            TotalCost = 450m,
                            VehicleId = 1
                        },
                        new
                        {
                            Id = 3,
                            AppointmentId = 3,
                            ClientId = new Guid("813a46d4-a59a-47ed-a88f-3143456e6f13"),
                            CustomRequest = "Change bumper",
                            DateCompleted = new DateTime(2024, 7, 5, 0, 10, 32, 32, DateTimeKind.Utc).AddTicks(4827),
                            DateRequested = new DateTime(2024, 7, 12, 0, 10, 32, 32, DateTimeKind.Utc).AddTicks(4827),
                            Message = " ",
                            Status = 7,
                            TotalCost = 400m,
                            VehicleId = 1
                        },
                        new
                        {
                            Id = 4,
                            AppointmentId = 4,
                            ClientId = new Guid("813a46d4-a59a-47ed-a88f-3143456e6f13"),
                            CustomRequest = "Change rims",
                            DateCompleted = new DateTime(2024, 7, 5, 0, 10, 32, 32, DateTimeKind.Utc).AddTicks(4828),
                            DateRequested = new DateTime(2024, 7, 13, 0, 10, 32, 32, DateTimeKind.Utc).AddTicks(4828),
                            Message = " ",
                            Status = 4,
                            TotalCost = 700m,
                            VehicleId = 2
                        },
                        new
                        {
                            Id = 5,
                            AppointmentId = 5,
                            ClientId = new Guid("813a46d4-a59a-47ed-a88f-3143456e6f13"),
                            CustomRequest = "Change window",
                            DateCompleted = new DateTime(2024, 6, 5, 0, 10, 32, 32, DateTimeKind.Utc).AddTicks(4831),
                            DateRequested = new DateTime(2024, 5, 5, 0, 10, 32, 32, DateTimeKind.Utc).AddTicks(4832),
                            Message = " ",
                            Status = 6,
                            TotalCost = 1000m,
                            VehicleId = 1
                        },
                        new
                        {
                            Id = 6,
                            AppointmentId = 6,
                            ClientId = new Guid("813a46d4-a59a-47ed-a88f-3143456e6f13"),
                            CustomRequest = "Change engine cover",
                            DateCompleted = new DateTime(2024, 5, 5, 0, 10, 32, 32, DateTimeKind.Utc).AddTicks(4835),
                            DateRequested = new DateTime(2024, 4, 5, 0, 10, 32, 32, DateTimeKind.Utc).AddTicks(4835),
                            Message = " ",
                            Status = 6,
                            TotalCost = 200m,
                            VehicleId = 2
                        },
                        new
                        {
                            Id = 7,
                            AppointmentId = 7,
                            ClientId = new Guid("813a46d4-a59a-47ed-a88f-3143456e6f13"),
                            CustomRequest = "Change mirrors",
                            DateCompleted = new DateTime(2024, 4, 5, 0, 10, 32, 32, DateTimeKind.Utc).AddTicks(4839),
                            DateRequested = new DateTime(2024, 3, 5, 0, 10, 32, 32, DateTimeKind.Utc).AddTicks(4840),
                            Message = " ",
                            Status = 6,
                            TotalCost = 600m,
                            VehicleId = 2
                        },
                        new
                        {
                            Id = 8,
                            AppointmentId = 8,
                            ClientId = new Guid("813a46d4-a59a-47ed-a88f-3143456e6f13"),
                            CustomRequest = "Check alignment",
                            DateCompleted = new DateTime(2024, 2, 5, 0, 10, 32, 32, DateTimeKind.Utc).AddTicks(4842),
                            DateRequested = new DateTime(2024, 1, 5, 0, 10, 32, 32, DateTimeKind.Utc).AddTicks(4842),
                            Message = " ",
                            Status = 6,
                            TotalCost = 1200m,
                            VehicleId = 1
                        });
                });

            modelBuilder.Entity("AutoService.Data.Entities.ServiceData.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 2,
                            IsActive = true,
                            Name = "Change oil",
                            Price = 80m
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            IsActive = true,
                            Name = "Change brakes",
                            Price = 250m
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            IsActive = true,
                            Name = "Change freon",
                            Price = 80m
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            IsActive = true,
                            Name = "Change lights",
                            Price = 35m
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 1,
                            IsActive = true,
                            Name = "Check oil",
                            Price = 5m
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 1,
                            IsActive = true,
                            Name = "Check brakes",
                            Price = 60m
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 1,
                            IsActive = true,
                            Name = "Check lights",
                            Price = 5m
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 1,
                            IsActive = true,
                            Name = "Check freon",
                            Price = 10m
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 3,
                            IsActive = true,
                            Name = "ECU Tune",
                            Price = 300m
                        });
                });

            modelBuilder.Entity("AutoService.Data.Entities.ServiceData.ServiceRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceRequest");

                    b.HasData(
                        new
                        {
                            Id = 16,
                            RequestId = 8,
                            ServiceId = 5
                        },
                        new
                        {
                            Id = 15,
                            RequestId = 8,
                            ServiceId = 8
                        },
                        new
                        {
                            Id = 14,
                            RequestId = 7,
                            ServiceId = 8
                        },
                        new
                        {
                            Id = 13,
                            RequestId = 7,
                            ServiceId = 7
                        },
                        new
                        {
                            Id = 12,
                            RequestId = 6,
                            ServiceId = 4
                        },
                        new
                        {
                            Id = 11,
                            RequestId = 6,
                            ServiceId = 1
                        },
                        new
                        {
                            Id = 10,
                            RequestId = 5,
                            ServiceId = 3
                        },
                        new
                        {
                            Id = 9,
                            RequestId = 5,
                            ServiceId = 2
                        },
                        new
                        {
                            Id = 8,
                            RequestId = 1,
                            ServiceId = 1
                        },
                        new
                        {
                            Id = 7,
                            RequestId = 1,
                            ServiceId = 2
                        },
                        new
                        {
                            Id = 6,
                            RequestId = 2,
                            ServiceId = 3
                        },
                        new
                        {
                            Id = 5,
                            RequestId = 2,
                            ServiceId = 4
                        },
                        new
                        {
                            Id = 4,
                            RequestId = 3,
                            ServiceId = 1
                        },
                        new
                        {
                            Id = 3,
                            RequestId = 3,
                            ServiceId = 2
                        },
                        new
                        {
                            Id = 2,
                            RequestId = 3,
                            ServiceId = 3
                        },
                        new
                        {
                            Id = 1,
                            RequestId = 4,
                            ServiceId = 1
                        });
                });

            modelBuilder.Entity("AutoService.Data.Entities.ServiceData.ServicesPerformed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("RecordId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RecordId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServicesPerformed");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RecordId = 1,
                            ServiceId = 1
                        },
                        new
                        {
                            Id = 2,
                            RecordId = 1,
                            ServiceId = 2
                        },
                        new
                        {
                            Id = 3,
                            RecordId = 1,
                            ServiceId = 3
                        },
                        new
                        {
                            Id = 4,
                            RecordId = 1,
                            ServiceId = 4
                        },
                        new
                        {
                            Id = 5,
                            RecordId = 2,
                            ServiceId = 3
                        },
                        new
                        {
                            Id = 6,
                            RecordId = 2,
                            ServiceId = 1
                        });
                });

            modelBuilder.Entity("AutoService.Data.Entities.UserData.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Role", "dbo");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b907ae86-1b23-4a25-85c7-0c651f5e1d3d"),
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("9f4392a8-80bc-4c4f-9a6a-8d2c6c875f84"),
                            Name = "Employee"
                        },
                        new
                        {
                            Id = new Guid("c6c0e6d5-1a11-4b25-96a2-1989e24a2d6d"),
                            Name = "Client"
                        });
                });

            modelBuilder.Entity("AutoService.Data.Entities.UserData.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedEmail")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("PostalCode")
                        .HasColumnType("int");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("RoleId");

                    b.ToTable("User", "dbo");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b8396f1d-a29a-4856-a4c1-1312dc97a4a1"),
                            AccessFailedCount = 0,
                            Active = true,
                            Address = "Ulica 2",
                            BirthDate = new DateTime(2000, 1, 11, 16, 22, 29, 961, DateTimeKind.Unspecified),
                            City = "Mostar",
                            ConcurrencyStamp = "97e229af-2604-4b7c-b579-d44e43b88576",
                            CreatedDate = new DateTime(2024, 2, 7, 17, 26, 40, 899, DateTimeKind.Unspecified).AddTicks(9869),
                            Email = "employee@employee.com",
                            EmailConfirmed = false,
                            FirstName = "Employee",
                            Gender = 1,
                            LastName = "User",
                            LockoutEnabled = false,
                            ModifiedDate = new DateTime(2024, 2, 7, 17, 26, 40, 899, DateTimeKind.Unspecified).AddTicks(9930),
                            NormalizedEmail = "EMPLOYEE@EMPLOYEE.COM",
                            NormalizedUserName = "EMPLOYEE",
                            PasswordHash = "AQAAAAIAAYagAAAAEGQ74H878UZXZ2qrO3PGUCmbDkeR0pVC/YQ0BJQHFv50ks5DsM3WDpIZiB85F9hpRg==",
                            PhoneNumber = "061234567",
                            PhoneNumberConfirmed = false,
                            PostalCode = 88104,
                            RoleId = new Guid("9f4392a8-80bc-4c4f-9a6a-8d2c6c875f84"),
                            SecurityStamp = "2bb56497-5c49-4c01-8bc7-e2df21ef5d53",
                            TwoFactorEnabled = false,
                            UserName = "EMPLOYEE"
                        },
                        new
                        {
                            Id = new Guid("f760ee5c-435b-4875-91a5-21a6a554513b"),
                            AccessFailedCount = 0,
                            Active = true,
                            Address = "Ulica 1",
                            BirthDate = new DateTime(2000, 1, 1, 16, 22, 29, 961, DateTimeKind.Unspecified),
                            City = "Mostar",
                            ConcurrencyStamp = "2ee39f74-519d-400f-bb89-c937f284b676",
                            CreatedDate = new DateTime(2024, 2, 7, 17, 24, 53, 422, DateTimeKind.Unspecified).AddTicks(1253),
                            Email = "admin@admin.com",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            Gender = 1,
                            LastName = "User",
                            LockoutEnabled = false,
                            ModifiedDate = new DateTime(2024, 2, 7, 17, 24, 53, 422, DateTimeKind.Unspecified).AddTicks(1765),
                            NormalizedEmail = "ADMIN@ADMIN.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEGQ74H878UZXZ2qrO3PGUCmbDkeR0pVC/YQ0BJQHFv50ks5DsM3WDpIZiB85F9hpRg==",
                            PhoneNumber = "061234567",
                            PhoneNumberConfirmed = false,
                            PostalCode = 88000,
                            RoleId = new Guid("b907ae86-1b23-4a25-85c7-0c651f5e1d3d"),
                            SecurityStamp = "76cbb512-37af-4f7a-aef4-4b52eb2c7618",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = new Guid("813a46d4-a59a-47ed-a88f-3143456e6f13"),
                            AccessFailedCount = 0,
                            Active = true,
                            Address = "Ulica 3",
                            BirthDate = new DateTime(1998, 1, 4, 16, 22, 29, 961, DateTimeKind.Unspecified),
                            City = "Sarajevo",
                            ConcurrencyStamp = "650492b3-5975-4a30-b796-b27c56a065a3",
                            CreatedDate = new DateTime(2024, 2, 7, 17, 27, 27, 331, DateTimeKind.Unspecified).AddTicks(607),
                            Email = "client@client.com",
                            EmailConfirmed = false,
                            FirstName = "Client",
                            Gender = 2,
                            LastName = "User",
                            LockoutEnabled = false,
                            ModifiedDate = new DateTime(2024, 2, 7, 17, 27, 27, 331, DateTimeKind.Unspecified).AddTicks(637),
                            NormalizedEmail = "CLIENT@CLIENT.COM",
                            NormalizedUserName = "CLIENT",
                            PasswordHash = "AQAAAAIAAYagAAAAEGQ74H878UZXZ2qrO3PGUCmbDkeR0pVC/YQ0BJQHFv50ks5DsM3WDpIZiB85F9hpRg==",
                            PhoneNumber = "061234567",
                            PhoneNumberConfirmed = false,
                            PostalCode = 88104,
                            RoleId = new Guid("c6c0e6d5-1a11-4b25-96a2-1989e24a2d6d"),
                            SecurityStamp = "f5f9fa28-8f00-45a5-b3d9-e0921a1a104d",
                            TwoFactorEnabled = false,
                            UserName = "Client"
                        });
                });

            modelBuilder.Entity("AutoService.Data.Entities.VehicleData.TransmissionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("TransmissionTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Manual",
                            isActive = true
                        },
                        new
                        {
                            Id = 2,
                            Name = "Automatic",
                            isActive = true
                        });
                });

            modelBuilder.Entity("AutoService.Data.Entities.VehicleData.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("FuelTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ManufactureYear")
                        .HasColumnType("int");

                    b.Property<int?>("Mileage")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("TransmissionTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("VehicleTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Vin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isArchived")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("FuelTypeId");

                    b.HasIndex("TransmissionTypeId");

                    b.HasIndex("VehicleTypeId");

                    b.ToTable("Vehicles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClientId = new Guid("813a46d4-a59a-47ed-a88f-3143456e6f13"),
                            FuelTypeId = 2,
                            Make = "Peugeot",
                            ManufactureYear = 2016,
                            Mileage = 195123,
                            Model = "308",
                            Status = 2,
                            TransmissionTypeId = 1,
                            VehicleTypeId = 2,
                            Vin = "1231AKHJKHJ1213JH",
                            isArchived = false
                        },
                        new
                        {
                            Id = 2,
                            ClientId = new Guid("813a46d4-a59a-47ed-a88f-3143456e6f13"),
                            FuelTypeId = 1,
                            Make = "Toyota",
                            ManufactureYear = 2008,
                            Mileage = 18590,
                            Model = "Yaris",
                            Status = 4,
                            TransmissionTypeId = 1,
                            VehicleTypeId = 2,
                            Vin = "12151AKGHEQRH15121JH",
                            isArchived = false
                        });
                });

            modelBuilder.Entity("AutoService.Data.Entities.VehicleData.VehicleFuelType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("VehicleFuelTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Petrol",
                            isActive = true
                        },
                        new
                        {
                            Id = 2,
                            Name = "Diesel",
                            isActive = true
                        },
                        new
                        {
                            Id = 3,
                            Name = "Electric",
                            isActive = true
                        },
                        new
                        {
                            Id = 4,
                            Name = "Hybrid",
                            isActive = true
                        });
                });

            modelBuilder.Entity("AutoService.Data.Entities.VehicleData.VehicleServiceRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<decimal?>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MileageAtTimeOfService")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId");

                    b.ToTable("VehicleServiceRecords");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cost = 1500m,
                            Date = new DateTime(2024, 7, 5, 2, 10, 32, 32, DateTimeKind.Local).AddTicks(4700),
                            MileageAtTimeOfService = 185100,
                            Notes = "Found broken light",
                            VehicleId = 1
                        },
                        new
                        {
                            Id = 2,
                            Cost = 500m,
                            Date = new DateTime(2024, 7, 5, 2, 10, 32, 32, DateTimeKind.Local).AddTicks(4727),
                            MileageAtTimeOfService = 17800,
                            Notes = "",
                            VehicleId = 2
                        });
                });

            modelBuilder.Entity("AutoService.Data.Entities.VehicleData.VehicleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("VehicleTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Sedan",
                            isActive = true
                        },
                        new
                        {
                            Id = 2,
                            Name = "Hatchback",
                            isActive = true
                        },
                        new
                        {
                            Id = 3,
                            Name = "SUV",
                            isActive = true
                        },
                        new
                        {
                            Id = 4,
                            Name = "Coupe",
                            isActive = true
                        },
                        new
                        {
                            Id = 5,
                            Name = "Minivan",
                            isActive = true
                        },
                        new
                        {
                            Id = 6,
                            Name = "Convertible",
                            isActive = true
                        },
                        new
                        {
                            Id = 7,
                            Name = "Station wagon",
                            isActive = true
                        },
                        new
                        {
                            Id = 8,
                            Name = "Crossover",
                            isActive = true
                        },
                        new
                        {
                            Id = 9,
                            Name = "Other",
                            isActive = true
                        });
                });

            modelBuilder.Entity("AutoService.Data.Entities.ClientData.Client", b =>
                {
                    b.HasBaseType("AutoService.Data.Entities.UserData.User");

                    b.HasDiscriminator().HasValue("Client");
                });

            modelBuilder.Entity("AutoService.Data.Entities.ServiceData.Appointment", b =>
                {
                    b.HasOne("AutoService.Data.Entities.ClientData.Client", "Client")
                        .WithMany("Appointments")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("AutoService.Data.Entities.ServiceData.Request", b =>
                {
                    b.HasOne("AutoService.Data.Entities.ServiceData.Appointment", "Appointment")
                        .WithOne("Request")
                        .HasForeignKey("AutoService.Data.Entities.ServiceData.Request", "AppointmentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AutoService.Data.Entities.ClientData.Client", "Client")
                        .WithMany("Requests")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AutoService.Data.Entities.VehicleData.Vehicle", "Vehicle")
                        .WithMany("Requests")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Client");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("AutoService.Data.Entities.ServiceData.Service", b =>
                {
                    b.HasOne("AutoService.Data.Entities.ServiceData.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Category");
                });

            modelBuilder.Entity("AutoService.Data.Entities.ServiceData.ServiceRequest", b =>
                {
                    b.HasOne("AutoService.Data.Entities.ServiceData.Request", "Request")
                        .WithMany("ServiceRequests")
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AutoService.Data.Entities.ServiceData.Service", "Service")
                        .WithMany("ServiceRequests")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("AutoService.Data.Entities.ServiceData.ServicesPerformed", b =>
                {
                    b.HasOne("AutoService.Data.Entities.VehicleData.VehicleServiceRecord", "Record")
                        .WithMany("ServicesPerformeds")
                        .HasForeignKey("RecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AutoService.Data.Entities.ServiceData.Service", "Service")
                        .WithMany("ServicesPerformeds")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Record");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("AutoService.Data.Entities.UserData.User", b =>
                {
                    b.HasOne("AutoService.Data.Entities.UserData.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("AutoService.Data.Entities.VehicleData.Vehicle", b =>
                {
                    b.HasOne("AutoService.Data.Entities.ClientData.Client", "Client")
                        .WithMany("Vehicles")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AutoService.Data.Entities.VehicleData.VehicleFuelType", "FuelType")
                        .WithMany()
                        .HasForeignKey("FuelTypeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AutoService.Data.Entities.VehicleData.TransmissionType", "TransmissionType")
                        .WithMany()
                        .HasForeignKey("TransmissionTypeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AutoService.Data.Entities.VehicleData.VehicleType", "VehicleType")
                        .WithMany()
                        .HasForeignKey("VehicleTypeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Client");

                    b.Navigation("FuelType");

                    b.Navigation("TransmissionType");

                    b.Navigation("VehicleType");
                });

            modelBuilder.Entity("AutoService.Data.Entities.VehicleData.VehicleServiceRecord", b =>
                {
                    b.HasOne("AutoService.Data.Entities.VehicleData.Vehicle", "Vehicle")
                        .WithMany("Records")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("AutoService.Data.Entities.ServiceData.Appointment", b =>
                {
                    b.Navigation("Request")
                        .IsRequired();
                });

            modelBuilder.Entity("AutoService.Data.Entities.ServiceData.Request", b =>
                {
                    b.Navigation("ServiceRequests");
                });

            modelBuilder.Entity("AutoService.Data.Entities.ServiceData.Service", b =>
                {
                    b.Navigation("ServiceRequests");

                    b.Navigation("ServicesPerformeds");
                });

            modelBuilder.Entity("AutoService.Data.Entities.UserData.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("AutoService.Data.Entities.VehicleData.Vehicle", b =>
                {
                    b.Navigation("Records");

                    b.Navigation("Requests");
                });

            modelBuilder.Entity("AutoService.Data.Entities.VehicleData.VehicleServiceRecord", b =>
                {
                    b.Navigation("ServicesPerformeds");
                });

            modelBuilder.Entity("AutoService.Data.Entities.ClientData.Client", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Requests");

                    b.Navigation("Vehicles");
                });
#pragma warning restore 612, 618
        }
    }
}
